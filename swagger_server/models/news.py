# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.site import Site
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class News(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title: str=None, sub_title: str=None, content: str=None, url: str=None, tipo: bool=None, accuracy: float=None, site: Site=None):
        """
        News - a model defined in Swagger

        :param title: The title of this News.
        :type title: str
        :param sub_title: The sub_title of this News.
        :type sub_title: str
        :param content: The content of this News.
        :type content: str
        :param url: The url of this News.
        :type url: str
        :param tipo: The tipo of this News.
        :type tipo: bool
        :param accuracy: The accuracy of this News.
        :type accuracy: float
        :param site: The site of this News.
        :type site: Site
        """
        self.swagger_types = {
            'title': str,
            'sub_title': str,
            'content': str,
            'url': str,
            'tipo': bool,
            'accuracy': float,
            'site': Site
        }

        self.attribute_map = {
            'title': 'Title',
            'sub_title': 'SubTitle',
            'content': 'content',
            'url': 'url',
            'tipo': 'tipo',
            'accuracy': 'accuracy',
            'site': 'site'
        }

        self._title = title
        self._sub_title = sub_title
        self._content = content
        self._url = url
        self._tipo = tipo
        self._accuracy = accuracy
        self._site = site

    @classmethod
    def from_dict(cls, dikt) -> 'News':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The News of this News.
        :rtype: News
        """
        return deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """
        Gets the title of this News.

        :return: The title of this News.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """
        Sets the title of this News.

        :param title: The title of this News.
        :type title: str
        """

        self._title = title

    @property
    def sub_title(self) -> str:
        """
        Gets the sub_title of this News.

        :return: The sub_title of this News.
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title: str):
        """
        Sets the sub_title of this News.

        :param sub_title: The sub_title of this News.
        :type sub_title: str
        """

        self._sub_title = sub_title

    @property
    def content(self) -> str:
        """
        Gets the content of this News.

        :return: The content of this News.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """
        Sets the content of this News.

        :param content: The content of this News.
        :type content: str
        """

        self._content = content

    @property
    def url(self) -> str:
        """
        Gets the url of this News.

        :return: The url of this News.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """
        Sets the url of this News.

        :param url: The url of this News.
        :type url: str
        """

        self._url = url

    @property
    def tipo(self) -> bool:
        """
        Gets the tipo of this News.

        :return: The tipo of this News.
        :rtype: bool
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo: bool):
        """
        Sets the tipo of this News.

        :param tipo: The tipo of this News.
        :type tipo: bool
        """

        self._tipo = tipo

    @property
    def accuracy(self) -> float:
        """
        Gets the accuracy of this News.
        Class of news

        :return: The accuracy of this News.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy: float):
        """
        Sets the accuracy of this News.
        Class of news

        :param accuracy: The accuracy of this News.
        :type accuracy: float
        """

        self._accuracy = accuracy

    @property
    def site(self) -> Site:
        """
        Gets the site of this News.

        :return: The site of this News.
        :rtype: Site
        """
        return self._site

    @site.setter
    def site(self, site: Site):
        """
        Sets the site of this News.

        :param site: The site of this News.
        :type site: Site
        """

        self._site = site

